
snippet blocinit
	class AuthenticationBloc
			extends Bloc<AuthenticationEvent, AuthenticationState> {
		AuthenticationBloc({
			required AuthenticationRepository authenticationRepository,
			required UserRepository userRepository,
		})  : _authenticationRepository = authenticationRepository,
					_userRepository = userRepository,
					super(const AuthenticationState.unknown()) {
			on<AuthenticationStatusChanged>(_onAuthenticationStatusChanged);
			on<AuthenticationLogoutRequested>(_onAuthenticationLogoutRequested);
			_authenticationStatusSubscription = _authenticationRepository.status.listen(
				(status) => add(AuthenticationStatusChanged(status)),
			);
		}

		final AuthenticationRepository _authenticationRepository;
		final UserRepository _userRepository;
		late StreamSubscription<AuthenticationStatus>
				_authenticationStatusSubscription;

		@override
		Future<void> close() {
			_authenticationStatusSubscription.cancel();
			_authenticationRepository.dispose();
			return super.close();
		}

		Future<void> _onAuthenticationStatusChanged(
			AuthenticationStatusChanged event,
			Emitter<AuthenticationState> emit,
		) async {
			switch (event.status) {
				case AuthenticationStatus.unauthenticated:
					return emit(const AuthenticationState.unauthenticated());
				case AuthenticationStatus.authenticated:
					final user = await _tryGetUser();
					return emit(
						user != null
								? AuthenticationState.authenticated(user)
								: const AuthenticationState.unauthenticated(),
					);
				case AuthenticationStatus.unknown:
					return emit(const AuthenticationState.unknown());
			}
		}

		void _onAuthenticationLogoutRequested(
			AuthenticationLogoutRequested event,
			Emitter<AuthenticationState> emit,
		) {
			_authenticationRepository.logOut();
		}

		Future<User?> _tryGetUser() async {
			try {
				final user = await _userRepository.getUser();
				return user;
			} catch (_) {
				return null;
			}
		}
	}

snippet blocstate
	part of 'authentication_bloc.dart';

	class AuthenticationState extends Equatable {
		const AuthenticationState._({
			this.status = AuthenticationStatus.unknown,
			this.user = User.empty,
		});

		const AuthenticationState.unknown() : this._();

		const AuthenticationState.authenticated(User user)
				: this._(status: AuthenticationStatus.authenticated, user: user);

		const AuthenticationState.unauthenticated()
				: this._(status: AuthenticationStatus.unauthenticated);

		final AuthenticationStatus status;
		final User user;

		@override
		List<Object> get props => [status, user];
	}

snippet blocevent
	part of 'authentication_bloc.dart';

	abstract class AuthenticationEvent extends Equatable {
		const AuthenticationEvent();

		@override
		List<Object> get props => [];
	}

	class AuthenticationStatusChanged extends AuthenticationEvent {
		const AuthenticationStatusChanged(this.status);

		final AuthenticationStatus status;

		@override
		List<Object> get props => [status];
	}

	class AuthenticationLogoutRequested extends AuthenticationEvent {}

